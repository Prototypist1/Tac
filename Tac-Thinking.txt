// no static for now
static x is method(int;int) input {
    input + 2 return;
}

// no static for now
static var x is method(int;int) input {
    input + 2 return;
}

// no static for now
// everything in a module is static
static method(int;int) x is method(int;int) input {
    input + 2 return;
}

// this is a little bit of weird notation 
type Named {
    int x;
    int y;
};

[int;int] // what is this? the lazy type notation?
[int x; int y]

object {
    5 => x ;
    7 => y ;
}

object {
    5 => var x ;
    7 => var y ;
}

object {
    5 => int x ;
    7 => int y ;
}

(5;7) // this is the lazy object notation

( 5 => x ; 7 => y) //??

(5 => x;7 => y) //?? why use is?? maybe you can use either? but for now no reason to have two assignment operators

// so method comes with a object but, somehow it knows to convert int to typeof(int)
// I guess that is always true... you can never use `int` and `typeof(int)` in the same place

static factorial is method (int;int) input { 
    input <== 2 if {
        1 return;
    } else {
        input -- 1 -> factorial * input return;
    }
};

(x;y) -> method

x <= 5;
5 => x;

5 => x -> is-even

-- is subtraction?

too many arrows!
-> call
=> assignment?
<= less than or equal

...
maybe 
> call
=> assign

>> greater
<< less
<== less or eqaul
>== greater or eqaul

...
>> call
< less
> greater

=============== x : 4 vs 4 => x

// I do maybe think this would be better:

object {
    int x: 5;
    int y: 7;
}

// but it would require a special case:
// int x : 4 + 9
// you want that to be 13 but under normal parsing you would do (int x: 4) + 9 and that is exceptional
// you don't want to have to write int x: (4 + 9);
// maybe : is not not a method like the others
// it can not be used in line
// it can only be used in a object or module
// it only prefixes a line

// Conculsion
// : is sugar, probably sugar that we want but I will think about it later

=============== if () {}


i guess there is no reason this:

if () {}
while () {}

function input1 input2

is not valid syntax


// another special case is

if (x == 2) { /*do stuff*/ }
while { x == 2 } { /*do stuff*/ } // this does not really work, unless { x == 2 } has an implict return, an explict return is impossible since that would return from the outer scope, implict return is reasonible, maybe that needs to be in []
do-while { /*do stuff*/ } { x == 2 } 
for {x = 0} {x < 10} { /*do stuff*/ } { /* */}

these is less offensive, it is not much worse than

5 return;

or 

... !true ...


// Conculsion
// if x y is sugar, probably sugar that we want but I will think about it later

=============== x.y = 5 sucks  as 5 => ( x . y )

5 -> this . x . y . z

^ this really does not work! it is:

(((5 -> this) . x) . y)

how bad is this:

5 -> (this.x.y.z)
this . x . y . z <- 5

maybe I need order of operators?

!. !> . > |. |>

would fix math too

(5 > this . x . y . z) . a

5 > this . x . y . z |. a

maybe no order of operators, but me first characters (^)

5 > this ^. x ^. y ^. z . a
5 > this ^. x ^. y ^. z . a

// Conculsion
// this sucks, I am going to do left to right with "me first" characters

======================= LEFT TO RIGHT FIELD

as we know, this:

5 -> (this.x.y.z)

sucks

but maybe the key is to write it the other way

say we have:

5 -> this \ x \ y \ z

maybe we could do

5 -> z / y / x / this

this is the "of" operator

5 -> z of y of x of this

......

you wrote this when you were not awake

I am introducing order of operations here. it is a local order of operations. it only starts doing the items that have priorety when it needs them.

it looks at "5 -> z of y of x of this" and sees

and understands it to be 5 -> (z of (y of (x of this)))

======================= INILNE METHOD

I am excited about the idea of inline method

like I use methods pretty often as a control stucture

used once 

like 

Thing thing = MakeThing();

Thing MakeThing(){
    // ....
}

I wish I could just write:

Thing thing = inline { ... }

========================= META PROGRAMMING

ok so meta programming,

does it need to be safe? are generics enough? what problem am I trying to solve by goint past generics? 
 - I want to have definitions dependant on other constants (like ints and strings), not just types
 - It would be cool to be able to work with T1...Tn with out have in some general way

these mean meta: <>

method, implementations and types can consume a meta

... -> list <(int)> x;
type <()>

it would be cool to do

method ... get-<memberName> x {
    return x.<memberName>;
}

but we can build that, we have dictionaries for that
also reflection to allow safe access

...

maybe we could have some nice support for direct subsitution, where you write some 'meta-method' that returns a string
calls to that method are dumbed in to your code before the code is compiled

you can define and call meta methods

meta-define{ 
    method tuple-of-n n {
        return "...";
    }
}

module {
    type tuple1 meta{ return tuple-of-n 1 },
    type tuple2 meta{ return tuple-of-n 2 },
    type tuple3 meta{ return tuple-of-n 3 },
} 

or, better

meta-define{ 
    method define-tuples n {
        ...
    }
}

module {
    meta{}
}

if you wanted to do list like this you would do 

...

code that takes compile time constants to complie time constants should be OK! compile time constants are: int, string, types, variables, Lines . say you have:

meta-method<(variable<T> _x, variable<T> _y),Lines> set-if-null<T>{
    return Lines{
        if (_x == null) {
            _x = _y;
        };
    }
}

then you write:

var x = null;
var y = Cat.new();
meta{set-if-null(x,y)}

if transforms it in to:

var x = null;
var y = Cat.new();
if (x == null){
    x = y;
}

...

you could do all method calls like this... just no recursion, everything is really just inlined. 

loops are really crazy

meta-method<(int i;Lines lines);Lines> repeat {
    for (0,i,()=>lines) -> sum return;
}

this:

var i = 0;
@{ (5,code{i++;}) -> @repeat }

is:

var i = 0;
i++;
i++;
i++;
i++;
i++;

with structural types you could do generics like this

meta-method<Type t,Type> pair{
    return meta-type { 
        @t left;
        @t right;
    }
}

@{ int -> pair } position;

if you want to call a method in a meta-method does it have to be a meta-meta-method? I really hope meta methods are just mothods

I am totally not builing this now, maybe someday

interesting idea for a language

OMG I am not using [] those could be for meta!

============= INDIRECtiON

often it really knows the actual class everything is. so we can by pass the indirection layer.  a method returns a contract type and an exact type. if we can use the exact type we can avoid the indirection.

you have

method<int,IGroup<int>> for i { ... } // IGroup but really it is an array

and you write:

5 -> for . Count <- ()

don't need indirection here we don't mess with the igroup, it is an array

============= do you need var???

I don't think you need var in tac

I mean what even is the point of var

int - (explict)
    - (nothing) it is an object
var - pick up the type from the LHS

so... a referance is a definition?? I need to think about this a little more

without var it is hard to know what scope something is defined in:
    it just mean scopes need to know there enclosing scope at build time they don't need to hold a referance tho

================== how do you express a generic method in tac??

method [ T; T ] input [T] { input return; } 
method [T] [ T; T ] input { input return; } 
method generics [T] [ T; T ] input { input return; } 
generic-method  [T] [ T; T ] input { input return; } 
method [ generic T; T ] input { input return; }

we need to capture the generic-ness in the type, not the definition. 

method [T] [T;T] 
implementation [T] [T;int;int] 

sure, why not

but I think this is a project or latter

================== names are fucked up

I think for now I have no 'this'

================== [] vs () vs {}

Think [] should be the "quick define" so 

[2 ; 2] => ( point . make )

method [ int ; int ;] i { ... } =: factorial ; 

becuase []  is define as a list
and [] means list in JSON

this leave () to only mean order of operations

================================= entrypoint

entrypoint can modify a method in a module

it is the new way to do main

===================================== TABLE

[]                                              quick thing type inferred (object, type, generics-parameters object)
object {}                                       object
method i o input {}                             method
method [i,o] input {}                           method
method [typeParameter] [i,o] input {}           method
method [typeParameter] i input, o {}            generic method
inline {}                                       inline -- what is an inline? method without a new scope?
type name {}                                    type
type [typeParameter] name {}                    generic type
implementation [c,i,o] context input {}         implementation
implementation c context, i input, o {}         implementation
{}                                              block               
()                                              do thing code first!
meta {}                                     ?   Meta -- what is a meta??
:= =: as = is => <= =                       ?   assign
+                                               add
/                                               divide
-                                           ?   subtract
%                                               mod
> -> => call |                              ?   call
< <- <=                                     ?   left call
<?                                          ?   less than
>?                                          ?   greater than
<=?                                         ?   less than or equal
>=?                                         ?   greater than or equal
=?                                              equal
if                                              if
if-empty ??                                     empty check
else                                            else
                                            ?   for
while                                       ?   while
is                                              is type
+                                           ?   concat
x                                               declare
var x                                           declare  
int x                                           declare
static x                                        static declare
static var x                                    static declare
static int x                                    static declare      
.  \                                            field
of  /                                       ?   reverse field
return                                          return
and                                             and
or                                              or
not !                                           not
xor                                             xor
shift-left                                      bit-shift
shift-right                                     bit-shift right


short hand:
{}                                              quick object/ qucik type -- I don't think these can ever be used in the same spot.. this does collide with a block though 



================================= NumberType vs double 

I think probably I need to wrap all my doubles in numberType

======================== idea: tags and contracts

you can tag ojects or modules
    they are kind of an alernate way to do types
and you can define contracts on tags
    everything with tag X must have a method with signeture y could be static method or an extension method

======================= things I don't like:

all the elements should have a compiled form


======================= simpler!?

method [i,o] input {}                                                       method
implementation [c,i,o] context input {}                                     implementation
type [typeParameter] name {}                                                generic type

could be:

method input-type output-type input {}                                      method
implementation context-type input-type output-type context input {}         implementation
type typeParameter1 typeParameter2 name {}                                  generic type

idk force everything to be fixed size
having optional stuff is nice

I like the old way I think
the metaphone is a method call
generic types are "build time" methods that take some number of parameters a create a type 

is it even like a method call? methods take one parameter

it works if I have some way to specify parameters:

implementation context-type:context input-type:input output-type   {} 

or if I use commas, commas are great.

implementation context-type context, input-type input, output-type {} 
implementation context-type, input-type, output-type, {} 

==================== do OR type require ()??

method [(bool | int ), (bool | int)] { ... }


method [bool | int , bool | int] x { ... } 

I can certainly read that... 

man do I hate parsing. 

6 =: bool | int x 

the parser is going to have a hard time with the above 

maybe if it knows | is an operation internal to an element??

ele(6) =: ele(bool,|,int,x)

I think from there I could figure out ele(bool,|,int,x) was a member. it ends with a names and then we look at the rest to see if it is a type

...

maybe I need another step where I parse in to a more reasonible represnetation. it could group type operations. and tree operations properally. 
think about it project for later I think 

=========================== how does static work?


static y := 1
static z := "test"

// this can't access other static things?
// because we don't know the order 

static x := object{
    
}

// I just want to keep punting on this problem 
// what I need right now are static methods 
// methods are safe and feature complete


// ok so delete module and add static method, but what I am going to do with my WIP code
// anything defined in root is static

x := method[int,int]

// maybe you can also init other stuff but it only has access to things above the file
// or something 
// same rules as member references with in objects (whatever those are)

================================= shorter names?

"method-blueprint" no way anyone wants to type that
users should use real names but programming language features can be shortened

fn { } // you don't have to name input, it is just input. tac can figure out the types
obj { }
imp { } 
type {} // type is fine



================================= what about "this"?

object {
     x := 5;
     y := method { x return; };
}

or

object {
     x := 5;
     y := method { this.x return; };
}

actually I think "that" is better than "this", "this" would be the method, "that" is the object containing the method
once you have that it makes sense to chian them:

object {
     x := 5;
     y := object {
        x := 5;
        y :=:= object {
            x := 5;
            y := method { that.that.that.x return; };
        }
    }
}

this will give you the outer most object's x

right now I don't have a keyword for 'this' or 'that' and things will walk up the scope looking for a match I should write some tests around this

===================================== linq syntax

// current syntax
(5,5) > add

//linq is a pain
(list, method[number, bool] input { input < 10 return; } ) > where
(( list, method[number, bool] input { input < 10 return; }) > where, method[number, number] input { input * input return; }) > select > to-array

// where is a method that takes a method and returns a method
list > (method[number, bool] input { input < 10 return; } > where) > (method[number, number] input { input * input return; } > select) > to-array
method[number, bool] input { input < 10 return; } > where < list
 
// with extensions methods or with the method defined directly on the set types
list
. where <  method[number, bool] input { input < 10 return; }
. select < method[number, number] input { input * input return; } 
. to-list < {}

// maybe you can make objects with out the () juts commas:
list, method[number, bool] input { input < 10 return; } > where, method[number, number] input { input * input return; } > select > to-array

// maybe where is primitive??
list where method[number, bool] input { input < 10 return; } select method[number, number] input { input * input return; } to-array

// I need to let people makes these!
// and not special syntax. you can just call a method this way. 
list > where of method[number, bool] input { input < 10 return; } > select of method[number, number] input { input * input return; } to-array

// to make it easier to pares I could add a special character
list | where method[number, bool] input { input < 10 return; } | select method[number, number] input { input * input return; } to-array

===================================== how do you define a generic method?

method [T] [T, Type[T]] input {} // probably this... ?

how do I call them? 

2 > add[number]  // how do I index?
2 > add of number
2 > add as method[number,number]

maybe these are always inferred, with a way to cast

z as number > add  -- casting input
2 > add as number --- casting output

that doesn't work... not all type parameters are tired to I/O... but maybe they should be?? 
plus, it's not really an operation, it's just more information on the call, call the number version

do I really need generics? 
I think... even if you can almost always infer you still want to be able to be explicit

generic-method [T1, T2, ... ,in, out] input { }

we need a generic reference.. it's not really an operation but we consider it one

x of [number, number]
x using [number, number]
x with [number, number]
x having [number, number]
x subsitute [number, number]
x realized-with [number, number]
x viewed-with [number, number]
x accessed-with [number, number]
x concretely [number, number]

... or maybe I could just index?
x[number, number]

but how do I implement generic methods in emit? I use Func<in, out> for methods
what happens when you call a generic method in C#??
well, any call would be to a 

I think I need to understand what's wrong with type-eraceure and probably remove it to be a better CIL citizen

Actually, I think it is fair to call this an operation. This is implemented as a generic method that returns a func<,>. the operation calls the generic method.

===============================

maybe you can use prefix/suffix/center notation for order of operations? 

5 > (a.b)

could be:

5 > . a b

5 > (a.b.c)

5 > . . a b c

that's not very readable

how is it with a more complex example?

list > (method [number;number;] x { x * x return} > (linq.select))

list > > method [number;number;] x { x * x return} . linq select 

maybe just a prefix:

list > first method [number;number;] x { x * x return} > first linq . select

you can do it now, it's just a bit backwords:

linq . select < method [number;number;] x { x * x return} < list

but it is worse if you try to call two linq methods. I don't think I can write this without ()

linq . select < method [number;number;] x { x * x return} < list > (linq . where < method [number;bool;] x { x % 2 == 0 return;})

but I can with the new notation

list > > method [number;number;] x { x * x return} . linq select > > method [number;bool;] x { x % 2 == 0 return;} . linq where 

it gets a little messey with () but it will do for now

list > (method [number;number;] x { x * x return} >  (linq . select)) > (method [number;bool;] x { x % 2 == 0 return;} >  (linq . where)) 

=========================== scope return?

sometimes I want a little return inside a function 

"you number is " concat
{
    a % 2 ==0 then {
        'even' scope-retrun;
    } else {
        'odd' scope-retrun;
    }
}  return;

====================== partial realize??

generic-method [T1,T2] [T1, pair[T1,T2]] x

y := x partial-realiz [T] [T,T] 

would return generic-method [T] [T, pair[T,T]]

naw... just wrap the method

y := generic-method [T] [T, pair[T,T]] input { x realize [T,T] < input return }


============================= maybe something can be a method and a type?

I mean it might make inferred types easier

and their is no reason not to have both, under the mood methods already come with an object

but conceptually I do like the to be seperate, forcing them to be seperate might be too much tho

============================= back to thinkging about generic method

is it just?

IGenericMethod<T1>{
    Func<T,T1> Make<T>();
}

...no I think I need to emit it each time
the relationship between the geneic(s) of make and the return type is unbound
it could be: Func<T,T> Make<T>();
or: Func<T,Pair[T]> Make<T>();


... I need to reset a bit on this... why did I need these? 

=========================== order representaion vs named representaion

("cat", 5) vs {type: "cat", age: 5}

the latter is implicitly the former
the former is not implicitly the latter
maybe you could do a mixed

{"cat", age: 5} 

this would be the following types
type {string, int}
type {int age}